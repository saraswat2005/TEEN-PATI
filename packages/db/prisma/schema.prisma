// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // Replace with your MongoDB connection string
}

// Enum for user roles
enum Role {
  admin
  user
  superAdmin
}

// User model
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String
  email     String   @unique
  phone     String?  @unique
  password  String
  avatar    String?
  role      Role     @default(user)
  verified  Boolean  @default(false)
  walletId  String?    @unique @db.ObjectId
  wallet    Wallet?    @relation(fields: [walletId], references: [id])
  bets      Bet[]
  messages  Message[]     
}

// Wallet model
model Wallet {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  balance       Float         @default(0)
  user          User?
  transactions  Transaction[] @relation("WalletTransactions")
  userId        String        @db.ObjectId
}

// Transaction model
model Transaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  date      DateTime @default(now())
  walletId  String   @db.ObjectId
  
  wallet    Wallet   @relation("WalletTransactions", fields: [walletId], references: [id])
}

// Game model
model Game {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  api       String
  bets      Bet[]
}

enum BetStatus {
  PENDING
  WON
  LOST
}

// Bet model
model Bet {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  user       User       @relation(fields: [userId], references: [id])
  userId     String     @db.ObjectId
  game       Game?      @relation(fields: [gameId], references: [id])
  gameId     String?    @db.ObjectId
  amount     Float
  createdAt  DateTime   @default(now())
  status     BetStatus  @default(PENDING)
  // Optional: If you want to record the outcome (e.g., winnings), you can add:
  outcome    Float?     // This could represent the amount won (or negative for losses)
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  senderId  String   @db.ObjectId // References User.id
  createdAt DateTime @default(now())
  updatedAt DateTime? // Remove @updatedAt for MongoDB

  // For future categorization (e.g., global, group, DM)
  channel   String?  @default("global")

  // Relationship to User
  sender    User     @relation(fields: [senderId], references: [id])
}